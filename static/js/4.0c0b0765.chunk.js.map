{"version":3,"sources":["pages/downloadlog.js","assets/image/pencil-square.svg"],"names":["searchBYList","cityDestinationList","cityOriginList","exporterList","hsCode4DigitList","hsCodeList","importerList","portDestinationList","portOriginList","searchValue","withRouter","connect","state","loading","loader","download_count","data","subscriptionId","dataAccess_count","totalWorkspace","subUserCount","queryPerDay","dispatch","loadingStart","loaderStart","loadingStop","loaderStop","updateSubscriptionCount","props","useHistory","userId","localStorage","getItem","userData","JSON","parse","_useState","useState","_useState2","_slicedToArray","searchList","setSearchList","_useState3","_useState4","setSearchListData","_useState5","undefined","_useState6","sortName","setSortName","_useState7","_useState8","sortOrder","setSortOrder","_useState9","_useState10","_useState11","_useState12","_useState13","_useState14","filteredArray","useEffect","userID","uplineId","Axios","method","url","concat","then","res","tempQueryList","queryList","length","map","item","index","jsonData","Object","keys","key","Val","subKey","subVal","item2","index2","subitem","subindex","relation","searchBy","push","console","log","catch","err","getSearchList","options","onSortChange","_jsx","_Fragment","children","_jsxs","className","BootstrapTable","striped","hover","pagination","search","TableHeaderColumn","width","isKey","dataField","dataFormat","cell","row","enumObject","dataSort","filter","elements","moment","fromDate","format","toDate","downloadedByEmail","downloadedDate","id","hidden","DloadTemplateXLS"],"mappings":"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","file":"static/js/4.0c0b0765.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Axios from \"../shared/Axios\";\r\nimport moment from 'moment';\r\nimport { useHistory } from 'react-router-dom';\r\nimport imagePencil from '../assets/image/pencil-square.svg';\r\nimport {BootstrapTable, TableHeaderColumn} from 'react-bootstrap-table';\r\nimport { loaderStart, loaderStop } from \"../store/actions/loader\";\r\nimport {updateSubscriptionCount} from \"../store/actions/data\"\r\nimport { connect } from \"react-redux\";\r\nimport { withRouter } from 'react-router-dom';\r\nimport DloadTemplateXLS from '../components/DloadTemplateXLS'\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\n\r\n// const searchBYList = { \"HS_CODE\": \"HS Code\", \"PRODUCT\": \"Product\", \"IMPORTER\": \"Importer\", \"EXPORTER\": \"Exporter\" };\r\n\r\nconst searchBYList = {\r\n  cityDestinationList : \"Destination City\",\r\n  cityOriginList : \"City of Origin\", \r\n  exporterList : \"Exporter List\", \r\n  hsCode4DigitList : \"HS Code (4 Digit)\", \r\n  hsCodeList : \"HS Code (8 Digit)\", \r\n  importerList : \"Importer List\", \r\n  portDestinationList : \"Destination Port\", \r\n  portOriginList : \"Port of Origin\", \r\n  searchValue : \"Search Value\"\r\n  }\r\n\r\n  let initialValues = {\r\n    tradeType: \"\",\r\n    searchBy: \"\",\r\n    searchValue: \"\",\r\n    countryCode: \"\",\r\n    fromDate: \"\",\r\n    toDate: \"\",\r\n    matchType: \"\",\r\n    dateRange: \"\",\r\n    searchFlag: false\r\n  };\r\n\r\n const  DownloadLog = (props) => {\r\n  const history = useHistory();\r\n\r\n  const userId = localStorage.getItem(\"userToken\");\r\n  let userData = localStorage.getItem(\"user\");\r\n  userData = userData ? JSON.parse(userData) : {};\r\n\r\n  const [searchList, setSearchList] = useState([]);\r\n  const [searchListData, setSearchListData] = useState([]);\r\n  const [sortName, setSortName] = useState(undefined);\r\n  const [sortOrder, setSortOrder] = useState(undefined);\r\n  const [searchValue, setSearchValue] = useState([]);\r\n  const [isDownloaded, setIsDownloaded] = useState(\"\");\r\n  const [filteredArray, setFilteredArray] = useState([]);\r\n\r\n\r\n  const getSearchList = () => {\r\n\r\n    let userID = \"\"\r\n    userID = userData && userData.uplineId == 0 ? \"uplineId\" : \"userId\" ;\r\n    props.loadingStart()\r\n    Axios({\r\n      method: \"GET\",\r\n      url: `search-management/search/listAll?${userID}=${userId}&isDownloaded=Y`\r\n    })\r\n      .then(res => {\r\n        let tempQueryList = []\r\n        if(res.data.queryList && res.data.queryList.length > 0){      \r\n          res.data.queryList.map((item,index)=> {   \r\n            let jsonData = {} \r\n            Object.keys(item).map((key,Val)=>{    \r\n              if(key != \"userSearchQuery\"){\r\n                jsonData[key] = item[key] \r\n              }\r\n              else {\r\n                Object.keys(item[\"userSearchQuery\"]).map((subKey,subVal)=>{\r\n                  jsonData[subKey] = item[\"userSearchQuery\"][subKey]\r\n                  jsonData['querySting'] = searchBYList ? Object.keys(searchBYList).map((item2, index2) => (\r\n                    item2 == \"queryBuilder\" && item[\"userSearchQuery\"][item2] ? (\r\n                        item[\"userSearchQuery\"][item2].map((subitem, subindex) => (\r\n                          `<b>${searchBYList[item2]+(subindex+1)}</b>` +\" : \"+\r\n                          `<b>${searchBYList[\"relation\"]}</b>` +\" : \"+ subitem.relation + \" ,&nbsp \"+ `<b>${searchBYList[\"searchBy\"]}</b>` +\" : \"+ subitem.searchBy + \" ,&nbsp \"+ `<b>${searchBYList[\"searchValue\"]}</b>` +\" : \"+ subitem.searchValue\r\n                        ))\r\n                      ) : \r\n                      (item[\"userSearchQuery\"][item2] != \"\" && item[\"userSearchQuery\"][item2] != null ? `<b>&nbsp;${searchBYList[item2]}</b>` +\" : \"+ item[\"userSearchQuery\"][item2] : null)\r\n                    )) : null\r\n\r\n                })\r\n              }\r\n            })\r\n            tempQueryList.push(jsonData)     \r\n          })\r\n        }\r\n        console.log(\"tempQueryList [======= \", tempQueryList)   \r\n        setSearchList(tempQueryList);\r\n        setSearchListData(tempQueryList);\r\n        props.loadingStop()\r\n      })\r\n      .catch(err => {\r\n        console.log(\"Err\", err);\r\n        props.loadingStop()\r\n      });\r\n  }\r\n\r\n  const fetchSearchQuery = (search_id) => {\r\n    if (search_id) {\r\n      let newSuggestionList = []\r\n      Axios({\r\n        method: \"GET\",\r\n        url: `/search-management/search/details`,\r\n        params: { searchId: search_id }\r\n      })\r\n        .then(res => {\r\n          if (res.data.queryList) {\r\n            let sParams = res.data.queryList[0].userSearchQuery;\r\n            initialValues = {\r\n              ...initialValues,\r\n              tradeType: sParams.tradeType,\r\n              matchType: sParams.matchType,\r\n              searchBy: sParams.searchBy,\r\n              searchValue: sParams.searchValue,\r\n              countryCode: sParams.countryCode,\r\n              fromDate: sParams.fromDate ? new Date(sParams.fromDate) : \"\",\r\n              toDate: sParams.toDate ? new Date(sParams.toDate) : \"\" ,\r\n              dateRange: search_id ? \"6\" : \"\",\r\n            };\r\n            \r\n            sParams.searchValue.map((item,index)=> {\r\n              let specificItem = { \"value\": item, \"label\": item };\r\n              newSuggestionList.push(specificItem); \r\n            })\r\n            setSearchValue(newSuggestionList)   \r\n            exportToCSV(sParams,search_id);    \r\n            setIsDownloaded(res.data.queryList[0].isDownloaded)  \r\n          }\r\n        })\r\n        .catch(err => {\r\n          console.log(\"Err\", err);\r\n        });\r\n    }\r\n  }\r\n\r\n  const exportToCSV = (searchParams,searchId) => {\r\n      const postData = {\r\n        \"searchType\": \"TRADE\",\r\n        \"tradeType\": searchParams.tradeType,\r\n        \"fromDate\": searchParams.fromDate,\r\n        \"toDate\": searchParams.toDate,\r\n        \"searchBy\": searchParams.searchBy,\r\n        \"searchValue\": searchParams.searchValue,\r\n        \"countryCode\": searchParams.countryCode,\r\n        \"pageNumber\": 0,\r\n        \"numberOfRecords\": 5000,\r\n        \"searchId\": searchId,\r\n        \"hsCodeList\": searchParams.hsCodeList,\r\n        \"exporterList\": searchParams.exporterList,\r\n        \"importerList\": searchParams.importerList,\r\n        \"cityOriginList\": searchParams.cityOriginList,\r\n        \"cityDestinationList\": searchParams.cityDestinationList,\r\n        \"portOriginList\": searchParams.portOriginList,\r\n        \"portDestinationList\": searchParams.portDestinationList,\r\n        \"orderByColumn\": \"\",\r\n        \"orderByMode\": \"desc\",\r\n        \"matchType\": searchParams.matchType,\r\n        \"hsCode4DigitList\": searchParams.hsCode4DigitList,\r\n\r\n      }\r\n      Axios({\r\n        method: \"POST\",\r\n        url: `search-management/search`,\r\n        data: JSON.stringify(postData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      })\r\n        .then(res => {\r\n          let exportDataSet = [];\r\n          if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"USA\") {\r\n            exportDataSet = res.data.expForeignList\r\n          } \r\n          else if (searchParams.tradeType.toLowerCase() === \"export\" && searchParams.countryCode.toUpperCase() === \"IND\") {\r\n            exportDataSet = res.data.expIndList\r\n          } \r\n          else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"USA\") {\r\n            exportDataSet = res.data.impForeignList\r\n          } \r\n          else if (searchParams.tradeType.toLowerCase() === \"import\" && searchParams.countryCode.toUpperCase() === \"IND\") {\r\n            exportDataSet = res.data.impIndList\r\n          }         \r\n          else {\r\n            exportDataSet = []\r\n          }\r\n\r\n          let filteredArray = []\r\n          for(let i = 0; i < exportDataSet.length; i++){\r\n            let filtered = {};\r\n              let obj = exportDataSet[i];\r\n              for(let key in obj){\r\n                  if(typeof(obj[key] == \"object\")){\r\n                      let item = obj[key];                    \r\n                      if(item != null){             \r\n                        filtered[key] = obj[key];                       \r\n                      }                 \r\n                  }                         \r\n              }   \r\n              filteredArray.push(filtered);\r\n          }    \r\n          setFilteredArray(filteredArray)\r\n          // setTimeout(downloadXLS(searchParams,totalRecord,1), 5000)\r\n          downloadXLS(searchParams)\r\n          \r\n          \r\n        })\r\n        .catch(err => {\r\n          console.log(\"Err == \", err);\r\n        });\r\n  }\r\n  \r\n  const downloadXLS = (searchParams) => {\r\n    const fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n    const fileExtension = \".xlsx\";\r\n    const fileName = searchParams.tradeType+\"_\"+searchParams.countryCode+\"_\"+searchParams.fromDate+\"_\"+searchParams.toDate;\r\n    // const ws = XLSX.utils.json_to_sheet(filteredArray);\r\n      \r\n    const ws = XLSX.utils.table_to_sheet(document.getElementById(\"reportXLS\"));\r\n    const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n    const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n    const data = new Blob([excelBuffer], { type: fileType });\r\n    FileSaver.saveAs(data, fileName + fileExtension);                 \r\n\r\n  }\r\n\r\n\r\n  function onSortChange(sortName, sortOrder) {\r\n    setSortName(sortName);\r\n    setSortOrder(sortOrder);\r\n  }\r\n\r\n  useEffect(() => {\r\n    getSearchList();\r\n  }, []);\r\n\r\n  const searchTypeFormat = (cell,row) => {\r\n    return cell.searchType \r\n  }\r\n\r\n  const QueryFormat =(cell,row,enumObject, index) => {\r\n    \r\n    // let textString  =  searchBYList ? Object.keys(searchBYList).map((item, index) => (\r\n    //       row[item] != \"\" && row[item] != null ? `<b>${searchBYList[item]}</b>` +\" : \"+ row[item] : null\r\n    //     ) ) : null \r\n\r\n    let res = cell.filter(elements => {\r\n      return elements !== null;\r\n      });\r\n    return (res)\r\n\r\n  }\r\n\r\n  const tradeTypeFormat = (cell,row) => {\r\n    return cell.tradeType \r\n  }\r\n\r\n  const countryFormat = (cell,row) => {\r\n    return cell.countryCode \r\n  }\r\n\r\n  const periodFormat = (cell,row) => {\r\n    return moment(row.fromDate).format(\"MMM. DD, YYYY\") +\"-\"+\r\n    moment(row.toDate).format(\"MMM. DD, YYYY\")\r\n  }\r\n\r\n  const searchedOnFormat = (cell,row) => {\r\n    return moment(row.downloadedDate).format(\"MMM. DD, YYYY, h:mm:ss a\")\r\n  }\r\n\r\n  const searchedByFormat = (cell,row) => {\r\n    return cell + \" [ \" +row.downloadedByEmail+ \" ]\"\r\n  }\r\n\r\n\r\n  const actionFormatter = (cell,row) => {\r\n    return (<div> <button onClick={() => {\r\n      fetchSearchQuery(cell)\r\n    }} className=\"effect-btn btn btn-primary mt-2 mr-2 icon-lg\"><i className=\"icon ion-md-download\"></i></button>\r\n    </div>)\r\n  }\r\n\r\n  const options = {\r\n    sortName: sortName,\r\n    sortOrder: sortOrder,\r\n    onSortChange: onSortChange\r\n  };\r\n\r\n  const indexN = (cell,row,enumObject, index) => {\r\n    return  (<div>{index+1}</div>);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container-fluid\">\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12 list-page mt-3\">\r\n    \r\n          <div className=\"row\">\r\n          <div className=\"col-lg-12 grid-margin stretch-card\">\r\n            <div className=\"card\">\r\n              <div className=\"card-body\">\r\n                <h4 className=\"card-title\">Download History</h4>\r\n                <div >\r\n                <BootstrapTable  data={searchList} striped hover \r\n                    pagination={ true } search\r\n                    options={ options }\r\n                >\r\n                    <TableHeaderColumn width='70' isKey dataField='id' dataFormat={ indexN }>Sl No</TableHeaderColumn>\r\n                    <TableHeaderColumn width='100' dataField='searchType'  dataSort={ true }>Search Type</TableHeaderColumn>\r\n                    <TableHeaderColumn width='400' dataField='querySting' dataFormat={ QueryFormat } >Query</TableHeaderColumn>\r\n                    <TableHeaderColumn width='100' dataField='tradeType'  dataSort={ true }>Trade Type</TableHeaderColumn>\r\n                    <TableHeaderColumn width='100' dataField='countryCode' dataSort={ true }>Country</TableHeaderColumn>\r\n                    <TableHeaderColumn width='150' dataField='userSearchQuery' dataFormat={ periodFormat } dataSort={ true }>Period</TableHeaderColumn>\r\n                    <TableHeaderColumn width='100' dataField='totalRecords'  dataSort={ true }>Total Records</TableHeaderColumn>\r\n                   { userData && userData.uplineId == 0 ?\r\n                    <TableHeaderColumn width='200' dataField='downloadedByName' dataFormat={ searchedByFormat } dataSort={ true }>Download By</TableHeaderColumn> : null\r\n                   }\r\n                    <TableHeaderColumn width='200' dataField='userSearchQuery' dataFormat={ searchedOnFormat } dataSort={ true }>Download On</TableHeaderColumn>\r\n                    <TableHeaderColumn width='100' dataField='recordsDownloaded' dataSort={ true }>Records</TableHeaderColumn>\r\n                    {/* <TableHeaderColumn width='150' dataField='searchId'  dataFormat={ actionFormatter }>Action</TableHeaderColumn> */}\r\n                </BootstrapTable>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          </div>\r\n\r\n          </div>\r\n        </div>\r\n\r\n        <div  id=\"reportXLS\" hidden= {true}>\r\n          {filteredArray && filteredArray.length > 0 ? <DloadTemplateXLS filteredArray={filteredArray}  /> : null}\r\n        </div>\r\n      </div>\r\n\r\n\r\n    </>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.loader.loading,\r\n    download_count: state.data.download_count,\r\n    subscriptionId: state.data.subscriptionId,\r\n    dataAccess_count: state.data.dataAccess_count,\r\n    totalWorkspace: state.data.totalWorkspace,\r\n    subUserCount: state.data.subUserCount,\r\n    queryPerDay: state.data.queryPerDay,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    loadingStart: () => dispatch(loaderStart()),\r\n    loadingStop: () => dispatch(loaderStop()),\r\n    updateSubscriptionCount: (data) => dispatch(updateSubscriptionCount(data)), \r\n  };\r\n};\r\nexport default withRouter (connect( mapStateToProps, mapDispatchToProps)(DownloadLog));\r\n","export default __webpack_public_path__ + \"static/media/pencil-square.75d078b5.svg\";"],"sourceRoot":""}